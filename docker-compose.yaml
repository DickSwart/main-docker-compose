version: "3.9"

#-----------------------------------------------------------------------------------------------------
# Master Stack
#
# This is my main docker-compose file with most of the apps.
# I run docker on other systems with smaller stacks.
#
# docker image prune -f
# docker-compose pull
# docker-compose up -d --force-recreate --build
# docker compose up -d  --remove-orphans
#-----------------------------------------------------------------------------------------------------
# NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.
#-----------------------------------------------------------------------------------------------------

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SECRETS
secrets:
  htpasswd:
    file: $DIR_DOCKER/secrets/htpasswd
  cf_email:
    file: $DIR_DOCKER/secrets/cf_email
  cf_api_key:
    file: $DIR_DOCKER/secrets/cf_api_key
  cf_token:
    file: $DIR_DOCKER/secrets/cf_token
  traefik_forward_auth:
    file: $DIR_DOCKER/secrets/traefik_forward_auth
  mysql_root_password:
    file: $DIR_DOCKER/secrets/mysql_root_password
  guac_db_name:
    file: $DIR_DOCKER/secrets/guac_db_name
  guac_mysql_user:
    file: $DIR_DOCKER/secrets/guac_mysql_user
  guac_mysql_password:
    file: $DIR_DOCKER/secrets/guac_mysql_password
  root_ca:
    file: $DIR_DOCKER/secrets/ssl/certs/root-ca.crt
  cert:
    file: $DIR_DOCKER/secrets/ssl/certs/floki.crt
  cert_fullchain:
    file: $DIR_DOCKER/secrets/ssl/certs/floki-fullchain.crt
  cert_key:
    file: $DIR_DOCKER/secrets/ssl/private/floki.key
  authelia_jwt_secret:
    file: $DIR_DOCKER/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: $DIR_DOCKER/secrets/authelia_session_secret
  authelia_session_redis_password:
    file: $DIR_DOCKER/secrets/authelia_session_redis_password
  authelia_storage_encryption_key:
    file: $DIR_DOCKER/secrets/authelia_storage_encryption_key
  authelia_storage_mysql_password:
    file: $DIR_DOCKER/secrets/authelia_storage_mysql_password
  authelia_notifier_smtp_password:
    file: $DIR_DOCKER/secrets/authelia_notifier_smtp_password

#-----------------------------------------------------------------------------------------------------
# EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228
#-----------------------------------------------------------------------------------------------------

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

# Keys common to some of the dependent services/apps
x-common-keys-vpn: &common-keys-vpn
  network_mode: "service:gluetun"
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"

#-----------------------------------------------------------------------------------------------------
# SERVICES
#-----------------------------------------------------------------------------------------------------

services:
  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - "$SOCKET_PORT:2375" # Port 2375 should only ever get exposed to the internal network.
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Traefik 2 - Reverse Proxy
  # Links:
  #  - https://doc.traefik.io/traefik/
  #  - https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  #  - https://github.com/ChristianLempa/boilerplates/blob/main/docker-compose/traefik/docker-compose.yml
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DIR_DOCKER/appdata/traefik2/acme/acme.json
  # chmod 600 $DIR_DOCKER/appdata/traefik2/acme/acme.json
  # touch $DIR_DOCKER/logs/cloudserver/traefik.log
  # touch $DIR_DOCKER/logs/cloudserver/access.log
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:2.10
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080 # insecure api wont work
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    volumes:
      - $DIR_DOCKER/appdata/traefik2/rules:/rules # file provider directory
      - $DIR_DOCKER/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must create this emtpy file and change permissions to 600
      - $DIR_DOCKER/appdata/traefik2/traefik.yaml:/etc/traefik/traefik.yaml
      - $DIR_DOCKER/logs/traefik:/logs # for fail2ban or crowdsec
    environment:
      TZ: $TZ
      CF_API_EMAIL_FILE: /run/secrets/cf_email
      CF_API_KEY_FILE: /run/secrets/cf_api_key
      HTPASSWD_FILE: /run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      DOMAIN_NAME_MAIN: $DOMAIN_NAME_MAIN # Passing the domain name to traefik container to be able to use the variable in rules.
    secrets:
      - cf_email
      - cf_api_key
      - htpasswd
      - source: root_ca
        target: /etc/ssl/root.ca.crt
    labels:
      #autoheal: true"
      traefik.enable: true
      # HTTP-to-HTTPS Redirect
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.rule: HostRegexp(`{host:.+}`)
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      ## HTTP Routers
      traefik.http.routers.traefik-rtr.entrypoints: websecure
      traefik.http.routers.traefik-rtr.rule: Host(`traefik.$DOMAIN_NAME_MAIN`)
      traefik.http.routers.traefik-rtr.tls: true # Some people had 404s without this
      # traefik.http.routers.traefik-rtr.tls.certresolver: cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      traefik.http.routers.traefik-rtr.tls.domains[0].main: $DOMAIN_NAME_MAIN
      traefik.http.routers.traefik-rtr.tls.domains[0].sans: "*.$DOMAIN_NAME_MAIN"

      traefik.http.routers.traefik-metrics-rtr.entrypoints: websecure
      traefik.http.routers.traefik-metrics-rtr.rule: Host(`traefik.$DOMAIN_NAME_MAIN`) && Path(`/metrics`)
      traefik.http.routers.traefik-metrics-rtr.tls: true # Some people had 404s without this
      # traefik.http.routers.traefik-metrics-rtr.tls.certresolver: cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      traefik.http.routers.traefik-metrics-rtr.tls.domains[0].main: $DOMAIN_NAME_MAIN
      traefik.http.routers.traefik-metrics-rtr.tls.domains[0].sans: "*.$DOMAIN_NAME_MAIN"
      ## Services - API & Metrics
      traefik.http.routers.traefik-rtr.service: api@internal
      traefik.http.routers.traefik-metrics-rtr.service: prometheus@internal
      ## Middlewares
      # traefik.http.routers.traefik-rtr.middlewares: chain-no-auth@file # For No Authentication
      # traefik.http.routers.traefik-rtr.middlewares: chain-basic-auth@file # For Basic HTTP Authentication
      # traefik.http.routers.traefik-rtr.middlewares: chain-oauth@file # For Google OAuth
      traefik.http.routers.traefik-rtr.middlewares: chain-authelia@file
      traefik.http.routers.traefik-metrics-rtr.middlewares: chain-basic-auth@file
      ## HomePage
      homepage.group: Network
      homepage.weight: 20
      homepage.name: Traefik
      homepage.icon: traefik.png
      homepage.href: https://traefik.$DOMAIN_NAME_MAIN
      homepage.description: Reverse proxy and load balancer

  # # https://github.com/tarampampam/error-pages/wiki/Traefik-(docker-compose)
  # error-pages:
  #   container_name: error-pages
  #   image: tarampampam/error-pages:latest # Using the latest tag is highly discouraged. Please, use tags in X.Y.Z format
  #   environment:
  #     TEMPLATE_NAME: ghost # set the error pages template
  #   labels:
  #     traefik.enable: true
  #     # use as "fallback" for any NON-registered services (with priority below normal)
  #     traefik.http.routers.error-pages-rtr.rule: HostRegexp(`{host:.+}`)
  #     traefik.http.routers.error-pages-rtr.priority: 100
  #     # should say that all of your services work on https
  #     traefik.http.routers.error-pages-rtr.entrypoints: web
  #     traefik.http.routers.error-pages-rtr.middlewares: middleware-error-pages
  #     # # # "errors" middleware settings
  #     # traefik.http.middlewares.middleware-error-pages.errors.status: 400-599
  #     # traefik.http.middlewares.middleware-error-pages.errors.service: error-pages-svc
  #     # traefik.http.middlewares.middleware-error-pages.errors.query: /{status}.html
  #     # define service properties
  #     traefik.http.services.error-pages-svc.loadbalancer.server.port: 8080
  #   depends_on:
  #     - traefik

  # sudo docker exec -ti authelia /bin/sh
  authelia:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:4.37.5
    volumes:
      - $DIR_DOCKER/appdata/authelia:/config
      - $DIR_DOCKER/logs/authelia:/logs
    environment:
      TZ: $TZ
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
      AUTHELIA_SESSION_REDIS_PASSWORD_FILE: /run/secrets/authelia_session_redis_password
      AUTHELIA_SESSION_REDIS_TLS_CERTIFICATE_CHAIN_FILE: /run/secrets/cert_fullchain
      AUTHELIA_SESSION_REDIS_TLS_PRIVATE_KEY_FILE: /run/secrets/cert_key
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/authelia_storage_encryption_key
      AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /run/secrets/authelia_storage_mysql_password
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/authelia_notifier_smtp_password
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_session_redis_password
      - cert_fullchain
      - cert_key
      - authelia_storage_encryption_key
      - authelia_storage_mysql_password
      - authelia_notifier_smtp_password
      - source: root_ca
        target: /ssl/certificates/root_ca.crt
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.authelia-rtr.entrypoints: websecure
      traefik.http.routers.authelia-rtr.tls: true
      traefik.http.routers.authelia-rtr.rule: Host(`authelia.$DOMAIN_NAME_MAIN`)
      ## Middlewares
      traefik.http.routers.authelia-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.authelia-rtr.service: authelia-svc
      traefik.http.services.authelia-svc.loadbalancer.server.port: 9091

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    environment:
      CONFIG: /config
      COOKIE_DOMAIN: $DOMAIN_NAME_MAIN
      INSECURE_COOKIE: false
      AUTH_HOST: oauth.$DOMAIN_NAME_MAIN
      URL_PATH: /_oauth
      LOG_LEVEL: warn # set to trace while testing bypass rules
      LOG_FORMAT: text
      LIFETIME: 86400 # 1 day
      DEFAULT_ACTION: auth
      DEFAULT_PROVIDER: google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.oauth-rtr.tls: true
      traefik.http.routers.oauth-rtr.entrypoints: websecure
      traefik.http.routers.oauth-rtr.rule: Host(`oauth.$DOMAIN_NAME_MAIN`)
      ## Middlewares
      traefik.http.routers.oauth-rtr.middlewares: chain-oauth@file
      ## HTTP Services
      traefik.http.routers.oauth-rtr.service: oauth-svc
      traefik.http.services.oauth-svc.loadbalancer.server.port: 4181

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H tcp://socket-proxy:2375
    ports:
      # - "$PORTAINER_PORT:9000"
      - "$PORTAINER_SECURE_PORT:9443"
    networks:
      - t2_proxy
      - socket_proxy
    volumes:
      - "portainer-data:/data" # volume on nas
    environment:
      TZ: $TZ
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.portainer-rtr.entrypoints: websecure
      traefik.http.routers.portainer-rtr.rule: Host(`portainer.$DOMAIN_NAME_MAIN`)
      ## Middlewares
      traefik.http.routers.portainer-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: 9000
      ## HomePage
      homepage.group: Servers
      homepage.weight: 30
      homepage.name: Portainer
      homepage.icon: portainer.png
      homepage.href: https://portainer.$DOMAIN_NAME_MAIN
      homepage.description: Container management
      homepage.widget.type: portainer
      homepage.widget.url: https://192.168.1.201:$PORTAINER_SECURE_PORT
      homepage.widget.env: 1
      homepage.widget.key: $PORTAINER_HOMEPAGE_API_KEY

  # Homepage - Application Dashboard
  # docker exec -ti homepage /bin/sh
  homepage:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    networks:
      - t2_proxy
      - socket_proxy
    ports:
     - "$HOMEPAGE_PORT:3000"
    volumes:
      - $DIR_DOCKER/appdata/homepage:/app/config
      - $DIR_DATA:/mnt/data
      - $DIR_DOCKER/logs/homepage:/var/log/logs # for fail2ban or crowdsec
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      LOG_LEVEL: "debug"
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.homepage-rtr.entrypoints: websecure
      traefik.http.routers.homepage-rtr.rule: Host(`$DOMAIN_NAME_MAIN`,`www.$DOMAIN_NAME_MAIN`)
      ## Middlewares
      traefik.http.routers.homepage-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.homepage-rtr.service: homepage-svc
      traefik.http.services.homepage-svc.loadbalancer.server.port: 3000

  # CrowdSec - Open-source & collaborative security IPS
  # see https://www.smarthomebeginner.com/crowdsec-docker-compose-1-fw-bouncer/
  # see https://www.smarthomebeginner.com/crowdsec-cloudflare-bouncer/
  # sudo docker compose -f /home/dickswart/docker/docker-compose.yaml exec -t crowdsec cscli collections list
  # sudo docker compose -f /home/dickswart/docker/docker-compose.yaml exec -t crowdsec cscli hub update
  # sudo docker compose -f /home/dickswart/docker/docker-compose.yaml exec -t crowdsec cscli metrics
  # sudo docker compose -f /home/dickswart/docker/docker-compose.yaml exec -t crowdsec cscli bouncers list
  crowdsec:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    ports:
      - "$CROWDSEC_API_PORT:8080"
      - "$CROWDSEC_PROMETHEUS_EXPORT_PORT:6060" # For metrics export to Prometheus database.
    environment:
      <<: *default-tz-puid-pgid
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/iptables crowdsecurity/linux crowdsecurity/nginx crowdsecurity/sshd fulljackz/proxmox"
      GID: "${GID-1000}"
      CUSTOM_HOSTNAME: vekter
      # DISABLE_LOCAL_API: "true" # Only after successfully registering and validating remote agent below.
      # # For the following, check local_api_credentials.yaml after cscli lapi register (secondary machine) and cscli machine validate (on primary machine)
      # AGENT_USERNAME: $CROWDSEC_AGENT_USERNAME
      # AGENT_PASSWORD: $CROWDSEC_AGENT_PASSWORD
      # LOCAL_API_URL: $CROWDSEC_LOCAL_API_URL
    volumes:
      - $DIR_DOCKER/logs/traefik:/logs/traefik:ro
      - /var/log:/var/log:ro
      - $DIR_DOCKER/appdata/crowdsec/data:/var/lib/crowdsec/data
      - $DIR_DOCKER/appdata/crowdsec/config:/etc/crowdsec

  # CrowdSec Bouncer - Cloudflare
  # Set max ip number right the first time (max 10000). 
  # Recreating the container deletes all ips and readds them causing cloudflare 429 rate limiting.
  cloudflare-bouncer:
    <<: *common-keys-core
    image: crowdsecurity/cloudflare-bouncer
    container_name: cloudflare-bouncer
    volumes:
      - $DIR_DOCKER/appdata/cloudflare-bouncer/cfg.yaml:/etc/crowdsec/bouncers/crowdsec-cloudflare-bouncer.yaml

  # CrowdSec Bouncer - Traefik
  traefik-bouncer:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: fbonalair/traefik-crowdsec-bouncer
    container_name: traefik-bouncer
    environment:
      GIN_MODE: release # default is debug (more logs)
      CROWDSEC_BOUNCER_API_KEY: $CROWDSEC_BOUNCER_TRAEFIK_API_KEY
      CROWDSEC_AGENT_HOST: $CROWDSEC_LAPI_HOST:$CROWDSEC_LAPI_PORT # CrowdSec host and port

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  qbittorrent:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 002
      WEBUI_PORT: $QBITTORRENT_PORT
    volumes:
      - $DIR_DOCKER/appdata/qbittorrent:/config
      - $DIR_DATA/downloads/torrents:/data/torrents # Ensure that downloads folder is set to /data/torrents in qBittorrent
    ports:
      - $QBITTORRENT_PORT:$QBITTORRENT_PORT
      - 6881:6881
      - 6881:6881/udp


  # Deluge is a lightweight, Free Software, cross-platform BitTorrent client.
  deluge:
    <<: *common-keys-apps
    # <<: *common-keys-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    ports:
      - "$DELUGE_PORT:8112"
    volumes:
      - $DIR_DOCKER/appdata/deluge:/config
      - $DIR_DATA/downloads/torrents:/downloads
    environment:
      <<: *default-tz-puid-pgid
      # DOCKER_HOST: tcp://socket-proxy:2375
    healthcheck: # https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test: "curl -sf http://ipinfo.io/ip  || exit 1"
      interval: 1m
      timeout: 10s
      retries: 1
    labels: # Traefik labels added via glueten
      deunhealth.restart.on.unhealthy: true
      traefik.enable: true
      ## HTTP Routers Auth Bypass
      traefik.http.routers.deluge-rtr-bypass.entrypoints: websecure
      traefik.http.routers.deluge-rtr-bypass.rule: Host(`deluge.$DOMAIN_NAME_MAIN`) && PathPrefix(`/json`)
      traefik.http.routers.deluge-rtr-bypass.priority: 100
      ## HTTP Routers
      traefik.http.routers.deluge-rtr.entrypoints: websecure
      traefik.http.routers.deluge-rtr.rule: Host(`deluge.$DOMAIN_NAME_MAIN`)
      traefik.http.routers.deluge-rtr.priority: 99
      ## Middlewares
      traefik.http.routers.deluge-rtr-bypass.middlewares: chain-no-auth@file
      traefik.http.routers.deluge-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.deluge-rtr.service: deluge-svc
      traefik.http.routers.deluge-rtr-bypass.service: deluge-svc
      traefik.http.services.deluge-svc.loadbalancer.server.port: 8112
      ## HomePage
      homepage.group: Media Acquisitions
      homepage.weight: 30
      homepage.name: Deluge
      homepage.icon: deluge.png
      homepage.href: https://deluge.$DOMAIN_NAME_MAIN
      homepage.description: Torrent client

  ############################# PVRS

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr:latest # latest was causing "Error parsing column 45" (used: nightly)
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.164
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $DIR_DOCKER/appdata/radarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $DIR_TEMP/appdata/radarr/MediaCover:/config/MediaCover
      # - $DIR_DATA:/data
      - $DIR_MEDIA/movies:/movies
      - $DIR_DATA/downloads/torrents:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      traefik.enable: true
      ## HTTP Routers Auth Bypass
      traefik.http.routers.radarr-rtr-bypass.entrypoints: websecure
      traefik.http.routers.radarr-rtr-bypass.rule: Host(`radarr.$DOMAIN_NAME_MAIN`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))
      traefik.http.routers.radarr-rtr-bypass.priority: 100
      ## HTTP Routers Auth
      traefik.http.routers.radarr-rtr.entrypoints: websecure
      traefik.http.routers.radarr-rtr.rule: Host(`radarr.$DOMAIN_NAME_MAIN`)
      traefik.http.routers.radarr-rtr.priority: 99
      ## Middlewares
      traefik.http.routers.radarr-rtr-bypass.middlewares: chain-no-auth@file
      traefik.http.routers.radarr-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.radarr-rtr.service: radarr-svc
      traefik.http.routers.radarr-rtr-bypass.service: radarr-svc
      traefik.http.services.radarr-svc.loadbalancer.server.port: 7878
      ## Homepage
      homepage.group: Media Acquisitions
      homepage.weight: 20
      homepage.name: Radarr
      homepage.icon: radarr.png
      homepage.href: https://radarr.$DOMAIN_NAME_MAIN
      homepage.description: Movie management

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.167
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $DIR_DOCKER/appdata/sonarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $DIR_TEMP/appdata/sonarr/MediaCover:/config/MediaCover
      - $DIR_MEDIA/tv:/tv
      - $DIR_DATA/downloads/torrents:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      traefik.enable: true
      ## HTTP Routers Auth Bypass
      traefik.http.routers.sonarr-rtr-bypass.entrypoints: websecure
      traefik.http.routers.sonarr-rtr-bypass.rule: Host(`sonarr.$DOMAIN_NAME_MAIN`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))
      traefik.http.routers.sonarr-rtr-bypass.priority: 100
      ## HTTP Routers Auth
      traefik.http.routers.sonarr-rtr.entrypoints: websecure
      traefik.http.routers.sonarr-rtr.rule: Host(`sonarr.$DOMAIN_NAME_MAIN`)
      traefik.http.routers.sonarr-rtr.priority: 99
      ## Middlewares
      traefik.http.routers.sonarr-rtr-bypass.middlewares: chain-no-auth@file
      traefik.http.routers.sonarr-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.sonarr-rtr.service: sonarr-svc
      traefik.http.routers.sonarr-rtr-bypass.service: sonarr-svc
      traefik.http.services.sonarr-svc.loadbalancer.server.port: 8989
      ## HomePage
      homepage.group: Media Acquisitions
      homepage.weight: 10
      homepage.name: Sonarr
      homepage.icon: sonarr.png
      homepage.href: https://sonarr.$DOMAIN_NAME_MAIN
      homepage.description: Series management

  ############################# UTILITIES

# #docker exec -it phpmyadmin sh
#   phpmyadmin:
#     <<: *common-keys-apps # See EXTENSION FIELDS at the top
#     container_name: phpmyadmin
#     image: lscr.io/linuxserver/phpmyadmin:latest
#     environment:
#       <<: *default-tz-puid-pgid
#       PMA_HOST: mariadb
#       # PMA_HOST: https://$MARIADB_HOST
#       PMA_PORT: $MARIADB_PORT
#       # PMA_ARBITRARY: 1 #optional
#       PMA_ABSOLUTE_URI: https://pma.$DOMAIN_NAME_MAIN #optional
#     volumes:
#       - $DIR_DOCKER/appdata/phpmyadmin:/config
#       - $DIR_DOCKER/shared/certs:/certs
#     ports:
#       - "$PHPMYADMIN_PORT:80"
#     labels:
#       - "traefik.enable=true"
#       ## HTTP Routers
#       - "traefik.http.routers.phpmyadmin-rtr.entrypoints=websecure"
#       - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAIN_NAME_MAIN`)"
#       ## Middlewares
#       - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file"
#       ## HTTP Services
#       - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
#       - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"
#       ## HomePage
#       - homepage.group=Utilities
#       - homepage.weight=100
#       - homepage.name=phpMyAdmin
#       - homepage.icon=phpmyadmin.png
#       - homepage.description=Administration of MySQL
#       - homepage.href=https://pma.$DOMAIN_NAME_MAIN

  # Grafana - Graphical data visualization for InfluxDB data
  # docker exec -it grafana /bin/bash
  grafana:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: grafana/grafana-oss:latest
    container_name: grafana
    networks:
      - t2_proxy
      - default
    ports:
      - "$GRAFANA_PORT:3000"
    user: $PUID:$PGID
    volumes:
      - $DIR_DOCKER/appdata/grafana/config:/var/lib/grafana
      - $DIR_DOCKER/appdata/grafana/grafana.ini/:/etc/grafana/grafana.ini
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.grafana-rtr.entrypoints: websecure
      traefik.http.routers.grafana-rtr.rule: Host(`grafana.$DOMAIN_NAME_MAIN`)
      ## Middlewares
      traefik.http.routers.grafana-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.grafana-rtr.service: grafana-svc
      traefik.http.services.grafana-svc.loadbalancer.server.port: 3000
    secrets:
      - source: cert_fullchain
        target: /etc/grafana/grafana.crt
      - source: cert_key
        target: /etc/grafana/grafana.key

  # Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser
  # Create all databases and tables first
  # $ docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --mysql > ~/docker/scripts/guacamole_initdb.sql
  # -----
  # connect to mariadb container shell
  # - docker exec -ti mariadb /bin/bash
  # connect to mariadb as root user
  # - mysql -uroot -p<get user from secrets mysql_root_password file>
  # create the database
  # - create database guacamole;
  # create and configure the database user
  # - GRANT ALL ON guacamole.* TO '<get user from secrets guac_mysql_user file>'@'%' IDENTIFIED BY '<get password from secrets guac_mysql_password file>';
  # flush mariadb privileges
  # - flush privileges;
  # exit mariadb cli
  # - quit
  # import the guacamole schema
  # - cat /config/scripts/guacamole_initdb.sql | mysql -uroot -p<get user from secrets mysql_root_password file> -Dguacamole
  # exit the maridb container shell
  # - exit
  # -----------------
  # docker exec -ti guacamole /bin/sh
  guacamole:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: guacamole/guacamole:latest
    container_name: guacamole
    ports:
      - "$GUACAMOLE_PORT:8080"
    networks:
      - t2_proxy
      - default
    user: root
    environment:
      GUACD_HOSTNAME: guacamole-daemon
      # MYSQL_HOSTNAME: mariadb
      MYSQL_HOSTNAME: $MARIADB_HOST
      MYSQL_PORT: $MARIADB_PORT
      MYSQL_DATABASE_FILE: /run/secrets/guac_db_name
      MYSQL_USER_FILE: /run/secrets/guac_mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/guac_mysql_password
    secrets:
      - guac_db_name
      - guac_mysql_user
      - guac_mysql_password
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.guacamole-rtr.entrypoints: websecure
      traefik.http.routers.guacamole-rtr.rule: Host(`guacamole.$DOMAIN_NAME_MAIN`)
      ## Middlewares
      traefik.http.routers.guacamole-rtr.middlewares: chain-authelia@file,add-guacamole
      traefik.http.middlewares.add-guacamole.addPrefix.prefix: /guacamole
      ## HTTP Services
      traefik.http.routers.guacamole-rtr.service: guacamole-svc
      traefik.http.services.guacamole-svc.loadbalancer.server.port: 8080
      ## HomePage
      homepage.group: Utilities
      homepage.weight: 10
      homepage.name: Guacamole
      homepage.icon: guacamole.png
      homepage.description: Clientless remote desktop gateway
      homepage.href: https://guacamole.$DOMAIN_NAME_MAIN

  # Guacamole Daemon - Needed for Guacamole
  guacamole-daemon:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: guacamole/guacd
    container_name: guacamole-daemon

  # # Gluetun - VPN Client for Docker Containers and More
  # # Gluetun only for use by torrent clients + on demand lan devices.
  # # Arr apps do not need VPN (not recommended), unless you have ISP/country restrictions.
  # gluetun:
  #   <<: *common-keys-core # See EXTENSION FIELDS at the top
  #   image: qmcgaw/gluetun
  #   container_name: gluetun
  #   cap_add:
  #     - NET_ADMIN
  #   devices:
  #     - /dev/net/tun
  #   ports:
  #     - 8888:8888/tcp # HTTP proxy
  #     - 8388:8388/tcp # Shadowsocks
  #     - 8388:8388/udp # Shadowsocks
  #     - $DELUGE_PORT:8112 # Exposing Deluge through Docker Host LAN IP
  #   volumes:
  #     - $DIR_DOCKER/appdata/gluetun:/gluetun
  #   environment:
  #     # See https://github.com/qdm12/gluetun/wiki
  #     TZ: $TZ
  #     VPN_SERVICE_PROVIDER: $GLUETUN_VPN_SERVICE_PROVIDER
  #     VPN_TYPE: $GLUETUN_VPN_TYPE
  #     OPENVPN_USER: $GLUETUN_OPENVPN_USER
  #     OPENVPN_PASSWORD: $GLUETUN_OPENVPN_PASSWORD
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.deluge-rtr.entrypoints=websecure"
  #     - "traefik.http.routers.deluge-rtr.rule=Host(`deluge.$DOMAIN_NAME_MAIN`)" # Deluge
  #     ## Middlewares
  #     - "traefik.http.routers.deluge-rtr.middlewares=chain-authelia@file" # Deluge
  #     ## HTTP Services
  #     - "traefik.http.routers.deluge-rtr.service=gluetun-svc" # Deluge
  #     - "traefik.http.services.gluetun-svc.loadbalancer.server.port=8112" # Deluge

  # # Uptime Kuma - Status Page & Monitoring Server
  # uptime-kuma:
  #   <<: *common-keys-core # See EXTENSION FIELDS at the top
  #   image: louislam/uptime-kuma
  #   container_name: uptime-kuma
  #   networks:
  #     - t2_proxy
  #     - default
  #   volumes:
  #     - $DIR_DOCKER/appdata/uptime-kuma:/app/data
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.uptime-kuma-rtr.entrypoints=websecure"
  #     - "traefik.http.routers.uptime-kuma-rtr.rule=Host(`kuma.$DOMAIN_NAME_MAIN`)"
  #     ## Middlewares
  #     - "traefik.http.routers.uptime-kuma-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc"
  #     - "traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001"

  # Jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc)
  # into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software.
  # This allows for getting recent uploads (like RSS) and performing searches.
  # Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps.
  jackett:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DIR_DOCKER/appdata/jackett:/config
      - $DIR_DATA/downloads/torrents/watch:/downloads
    ports:
      - $JACKETT_PORT:9117

  ############################# MAINTENANCE

  # WatchTower - Automatic Docker Container Updates
  watchtower:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - socket_proxy
    ports:
      - $WATCHTOWER_PORT:8080 # Exposing API Port
    environment:
      TZ: ${TZ}
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATION_URL: telegram://${TGRAM_WATCHTOWER_BOT_TOKEN}@telegram?channels=${TGRAM_CHAT_ID}
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
      WATCHTOWER_NOTIFICATION_TEMPLATE: ---- Floki ----{{println}}{{range .}}{{.Message}}{{println}}{{end}}
      WATCHTOWER_HTTP_API_METRICS: "true"
      WATCHTOWER_HTTP_API_TOKEN: $WATCHTOWER_API_KEY
      DOCKER_HOST: tcp://socket-proxy:2375

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - socket_proxy
    volumes:
      - $DIR_DOCKER/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  # DeUnhealth - Restart your unhealthy containers safely (e.g. containers depending on VPN and VPN reconnects)
  deunhealth:
    <<: *common-keys-core
    image: qmcgaw/deunhealth
    container_name: deunhealth
    networks:
      - socket_proxy
    environment:
      LOG_LEVEL: info
      HEALTH_SERVER_ADDRESS: 127.0.0.1:9999
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  # # WhoAmI - For Testing and Troubleshooting
  # whoami:
  #   <<: *common-keys-core # See EXTENSION FIELDS at the top
  #   image: traefik/whoami
  #   container_name: whoami
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.whoami-rtr.entrypoints=websecure"
  #     - "traefik.http.routers.whoami-rtr.rule=Host(`whoami.$DOMAIN_NAME_MAIN`)"
  #     ## Middlewares
  #     - "traefik.http.routers.whoami-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.whoami-rtr.service=whoami-svc"
  #     - "traefik.http.services.whoami-svc.loadbalancer.server.port=80"

#-----------------------------------------------------------------------------------------------------
# VOLUMES
#-----------------------------------------------------------------------------------------------------

volumes:
  portainer-data:
    name: "portainer-data"
    driver_opts:
      type: "nfs"
      o: "addr=$NAS_IP_ADDRESS,rw,noatime,rsize=8192,wsize=8192,tcp,timeo=14,nfsvers=4"
      device: ":/volume1/docker-volumes/portainer"
  # mariadb-data:
  #   name: "mariadb-data"
  #   driver_opts:
  #     type: "nfs"
  #     o: "addr=$NAS_IP_ADDRESS,rw,noatime,rsize=8192,wsize=8192,tcp,timeo=14,nfsvers=4"
  #     device: ":/volume1/docker-volumes/mariadb"
